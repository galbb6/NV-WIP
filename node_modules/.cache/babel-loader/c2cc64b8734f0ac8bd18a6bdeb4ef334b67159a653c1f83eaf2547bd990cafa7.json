{"ast":null,"code":"var _jsxFileName = \"/Users/galbinyamin/Desktop/NVIDIA/excel-analysis/src/components/FileUpload.js\";\nimport React, { useState } from 'react';\nimport XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onFileUpload\n}) => {\n  const handleFileChange = async e => {\n    const uploadedFile = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const analyzedData = analyzeExcelData(workbook);\n      onFileUpload(analyzedData);\n    };\n    reader.readAsArrayBuffer(uploadedFile);\n  };\n  const analyzeExcelData = workbook => {\n    // Analyze the data and return the results\n    // ... Your analysis logic here ...\n    return analyzedResults;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-upload\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \".xlsx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","FileUpload","onFileUpload","handleFileChange","e","uploadedFile","target","files","reader","FileReader","onload","data","Uint8Array","result","workbook","read","type","analyzedData","analyzeExcelData","readAsArrayBuffer","analyzedResults","className","children","onChange","accept","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/galbinyamin/Desktop/NVIDIA/excel-analysis/src/components/FileUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport XLSX from 'xlsx';\n\nconst FileUpload = ({ onFileUpload }) => {\n  const handleFileChange = async (e) => {\n    const uploadedFile = e.target.files[0];\n\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, { type: 'array' });\n\n      const analyzedData = analyzeExcelData(workbook);\n      onFileUpload(analyzedData);\n    };\n    reader.readAsArrayBuffer(uploadedFile);\n  };\n\n  const analyzeExcelData = (workbook) => {\n    // Analyze the data and return the results\n    // ... Your analysis logic here ...\n    return analyzedResults;\n  };\n\n  return (\n    <div className=\"file-upload\">\n      <input type=\"file\" onChange={handleFileChange} accept=\".xlsx\" />\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EACvC,MAAMC,gBAAgB,GAAG,MAAOC,CAAC,IAAK;IACpC,MAAMC,YAAY,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAEtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAON,CAAC,IAAK;MAC3B,MAAMO,IAAI,GAAG,IAAIC,UAAU,CAACR,CAAC,CAACE,MAAM,CAACO,MAAM,CAAC;MAC5C,MAAMC,QAAQ,GAAGhB,IAAI,CAACiB,IAAI,CAACJ,IAAI,EAAE;QAAEK,IAAI,EAAE;MAAQ,CAAC,CAAC;MAEnD,MAAMC,YAAY,GAAGC,gBAAgB,CAACJ,QAAQ,CAAC;MAC/CZ,YAAY,CAACe,YAAY,CAAC;IAC5B,CAAC;IACDT,MAAM,CAACW,iBAAiB,CAACd,YAAY,CAAC;EACxC,CAAC;EAED,MAAMa,gBAAgB,GAAIJ,QAAQ,IAAK;IACrC;IACA;IACA,OAAOM,eAAe;EACxB,CAAC;EAED,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,aAAa;IAAAC,QAAA,eAC1BtB,OAAA;MAAOgB,IAAI,EAAC,MAAM;MAACO,QAAQ,EAAEpB,gBAAiB;MAACqB,MAAM,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV,CAAC;AAACC,EAAA,GA1BI5B,UAAU;AA4BhB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}